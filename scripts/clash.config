#!/system/bin/sh

# 日志
date_day=`date`
date_log="[`TZ=Asia/Shanghai date "+%H:%M:%S"`]"
# BUSYBOX 路径
busybox_path="/data/adb/magisk/busybox"
# IPV6
ipv6=$(grep "ipv6" /data/clash/template | ${busybox_path} awk -F ': ' '{print $2}' | head -1)

#0为仅启动clash,1为clash+mosdns
run_mode="1"

# ID
pref_id="5000"
mark_id="2022"
table_id="2022"
static_dns="false"     #8.8.8.8 不是很懂这是干啥用的
restart_clash="true"   #更新完成自动重启clash

# 黑白名单
mode="blacklist"
# 端口检测
port_detect="true"
# NAT KERNEL
nat_kernel="false"
# 自动绕过本机ip,filter_local请勿轻易打开,打开后有可能引起设备软重启,如你手机有获取到公网ip.
# 优先重启cfm,即可绕过本机ip,检查是否正常,次要选择尝试打开filter_local,如遇设备软重启,请关闭.
filter_local="false"
monitor_local_ip="true"
# 选择内核
use_premium="false"
# 下载在线订阅
config_online="false"
# 自动更新订阅开关
auto_updateSubcript="false"

# 定时更新geo文件和订阅 cron定时器教程：  https://crontab.guru/ 设置为每天凌晨五点更新
update_interval="0 5 * * *"
# 订阅链接 建议使用rule-provider  
Subcript_url="https://d1.mk/qo6sxcG"

# TUN 设置
if [ "${use_premium}" == "true" ]; then
    tun_device="utun"
else
    tun_device="Meta"
fi

# cgroup限制内存
Cgroup_memory="false"
Cgroup_memory_limit="50M"
Cgroup_memory_path=""
# 留空则自动获取
# 限制内存使用，量力而行，限制太死会造成CPU占用过高，-1则不限制，留空则不操作
# 更新限制请保存后执行 /data/clash/scripts/clash.tool -l

# clash配置目录 以下为各个文件路径
Clash_bin_name="clash"
Clash_data_dir="/data/clash"
# DIRECTORY TEMPLATE 
Clash_dns="/data/clash/template"
# CMD
cmd_run="/data/clash/run/cmdRunning"
# 日志目录
Clash_run_path="/data/clash/run"
CFM_logs_file="/data/clash/run/run.logs"
CFM_logs_file_update="/data/clash/run/update.log"
# pid目录
Clash_pid_file="/data/clash/run/clash.pid"
# 内核目录
Clash_bin_path="/data/clash/core/${Clash_bin_name}"
# LIB CORE
Clash_Premium="/data/clash/core/lib/Clash.Premium"
Clash_Meta="/data/clash/core/lib/Clash.Meta"
# 脚本目录
Clash_scripts_dir="/data/clash/scripts"

#多配置文件切换 建议不要手动更改 使用面板切换
use_config="false"
if [ "${use_config}" == "false" ]; then
    Clash_config_file="/data/clash/config.yaml"
else
    Clash_config_file="/data/clash/confs/config/${use_config}"
fi
# 合并后配置
temporary_config_file="/data/clash/run/config.yaml"
# 包名配置路径
appuid_file="/data/clash/run/appuid.list"
filter_packages_file="/data/clash/packages.list"
system_packages_file="/data/system/packages.list"
# 自动更新内核
schedule_update_core="false"
# meta内核更新地址
url_meta="https://github.com/taamarin/Clash.Meta/releases" # Core.Meta fork taamarin
# url_meta="https://github.com/MetaCubeX/Clash.Meta/releases" # Core.Meta official
# p核更新地址
url_premium="https://github.com/Dreamacro/clash/releases"

# mosdns 相关配置
mosdns_data_dir="/data/clash/mosdns"
mosdns_bin_path="${mosdns_data_dir}/mosdns"
mosdns_logs_file="${Clash_run_path}/mosdns.log"
mos_kernel_logs_file="${Clash_run_path}/mos_kernel.log"
mosdns_config_file="${mosdns_data_dir}/config.yaml"
mos_pid_file="${Clash_run_path}/mosdns.pid"

mosdns_port="2053"  #mosdns服务器两个端口之一  如果开启mosdns，dns转发到2053，否则转发到默认的1053
Clash_dns_port=$(grep "listen" ${Clash_dns} | ${busybox_path} awk -F ':' '{print $3}')
if [ "${run_mode}" == "1"]; then
    dns_port="2053"
else
    dns_port="${Clash_dns_port}"
fi
------------------------------------------------------
log() {
    if [ ${Clash_old_logs} == "true" ];then
        echo [`TZ=Asia/Shanghai date "+%H:%M:%S"`]$1>>${CFM_logs_file}
        echo [`TZ=Asia/Shanghai date "+%Y-%m-%d %H:%M:%S"`]$1>>${CFM_OldLogs_file}
    else
        echo [`TZ=Asia/Shanghai date "+%H:%M:%S"`]$1>>${CFM_logs_file}
    fi
}
#日志函数暂没启用，目前使用echo命令输出日志


arm=$(uname -m)
if [ "${use_premium}" == "false" ]; then
    meta_alpha="true"
    tag="Alpha"
#    tag="Prerelease-Alpha" # MetaCubeX
    tag_name="${tag}@[0-9,a-z]+"
#    tag_name="alpha-[0-9,a-z]+"  # MetaCubeX
    file_core="Clash.Meta"
    if [ ${arm} == "aarch64" ] ; then
      platform="android"
      arch="arm64"
    else
      platform="linux"
      arch="armv7"
    fi
else
    premium_dev="true"
    file_core="Clash.Premium"
    platform="linux"
    if [ ${arm} == "aarch64" ] ; then
      arch="armv8"
    else
      arch="armv7"
    fi
fi
# 自动更新geo文件
auto_updateGeoX="true"
Clash_geodata_mode=$(grep "geodata-mode" ${Clash_dns} | ${busybox_path} awk -F ': ' '{print $2}')
if [ "${Clash_geodata_mode}" == "false" ]; then
    Clash_GeoIP_file="/data/clash/Country.mmdb"
    GeoIP_dat_url="https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb"
else
    Clash_GeoIP_file="/data/clash/GeoIP.dat"
    GeoIP_dat_url="https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat"
fi
Clash_GeoSite_file="/data/clash/GeoSite.dat"
GeoSite_url="https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat"

# CLASH权限和用户组
Clash_permissions="6755"
Clash_user_group="root:net_admin"
# IPTABLES
iptables_version=$(iptables -V | grep -o "v1\.[0-9]")
if [ "${iptables_version}" = "v1.4" ] ; then
    export ANDROID_DATA=/data
    export ANDROID_ROOT=/system
    iptables_wait="iptables"
    ip6tables_wait="ip6tables"
elif [ "${iptables_version}" = "v1.6" ] || [ "${iptables_version}" = "v1.8" ] ; then
    iptables_wait="iptables -w 100"
    ip6tables_wait="ip6tables -w 100"
else
    iptables_wait="iptables"
    ip6tables_wait="ip6tables" 
fi
# GREP FILE/PORT
Clash_user=$(echo ${Clash_user_group} | ${busybox_path} awk -F ':' '{print $1}')
Clash_group=$(echo ${Clash_user_group} | ${busybox_path} awk -F ':' '{print $2}')
Clash_tproxy_port=$(grep "tproxy-port" ${Clash_dns} | ${busybox_path} awk -F ': ' '{print $2}')
#与mosdns有关 简单调整下位置 Clash_dns_port=$(grep "listen" ${Clash_dns} | ${busybox_path} awk -F ':' '{print $3}')
Clash_tun_status=$(${busybox_path} awk -F ': ' '/^tun: *$/{getline; print $2}' ${Clash_dns})
Clash_auto_route=$(grep "auto-route" ${Clash_dns} | ${busybox_path} awk -F ': ' '{print $2}')
Clash_auto_detect_interface=$(grep "auto-detect-interface" ${Clash_dns} | ${busybox_path} awk -F ': ' '{print $2}')
Clash_tcp_concurrent=$(grep "tcp-concurrent" ${Clash_dns} | ${busybox_path} awk -F ':' '{print $2}')
Clash_enhanced_mode=$(grep "enhanced-mode" ${Clash_dns} | ${busybox_path} awk -F ': ' '{print $2}')
Clash_stack_mode=$(grep "stack" ${Clash_dns} | ${busybox_path} awk -F ': ' '{print $2}')

# INTERNET IPV4 & IPV6
reserved_ip=(0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 192.168.0.0/16 198.51.100.0/24 203.0.113.0/24 224.0.0.0/4 233.252.0.0/24 240.0.0.0/4 255.255.255.255/32)
reserved_ip6=(::/128 ::1/128 ::ffff:0:0/96 100::/64 64:ff9b::/96 2001::/32 2001:10::/28 2001:20::/28 2001:db8::/32 2002::/16 fc00::/7 fe80::/10 ff00::/8)

# SPECIAL AIDS (include/private/android_filesystem_config.h): //0 root; 2000 adb; 9997 everybody; 9999 nobody; // 1051 netd; 1052 dnsmasq; 3003 AF_INET; 3004 inet; 3005 net_admin; // 2900-2999 5000-5999 OEM; 10000+ APP; 99000-99999 ISOLATE; 100000 USER; 50000-59999 SHARED_GID
# AIDs=(3005 9999)