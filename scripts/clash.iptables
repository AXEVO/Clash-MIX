#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
source /data/clash/clash.config

forward() {
  ${iptables_wait} $1 FORWARD -o ${tun_device} -j ACCEPT
  ${iptables_wait} $1 FORWARD -i ${tun_device} -j ACCEPT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} $1 FORWARD -o ${tun_device} -j ACCEPT
    ${ip6tables_wait} $1 FORWARD -i ${tun_device} -j ACCEPT
  fi
}

# 启动重定向函数
start_redirect() {
  ${iptables_wait} -t nat -N BOX_EXTERNAL
  ${iptables_wait} -t nat -F BOX_EXTERNAL
  ${iptables_wait} -t nat -N BOX_LOCAL
  ${iptables_wait} -t nat -F BOX_LOCAL

  if [ "${Clash_bin_name}" = "clash" ] ; then
    ${iptables_wait} -t nat -A BOX_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A BOX_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A BOX_EXTERNAL -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables_wait} -t nat -A BOX_LOCAL -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    #  其他类型的入站流量应添加在此处，以接收 DNS 流量而不是嗅探
    #    ${iptables_wait} -t nat -A BOX_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_redir_port}
    #    ${iptables_wait} -t nat -A BOX_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_redir_port}
  fi

  for subnet in ${reserved_ip[*]} ; do
    ${iptables_wait} -t nat -A BOX_EXTERNAL -d ${subnet} -j RETURN
    ${iptables_wait} -t nat -A BOX_LOCAL -d ${subnet} -j RETURN
  done

  ${iptables_wait} -t nat -A BOX_EXTERNAL -p tcp -i lo -j REDIRECT --to-ports ${Clash_redir_port}

  for ap in ${ap_list[*]} ; do
    ${iptables_wait} -t nat -A BOX_EXTERNAL -p tcp -i ${ap} -j REDIRECT --to-ports ${Clash_redir_port}
  done
  log "[info] ${ap_list[*]} 网卡透明代理."

  ${iptables_wait} -t nat -I PREROUTING -j BOX_EXTERNAL

  ${iptables_wait} -t nat -I BOX_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  for ignore in ${ignore_out_list[*]} ; do
    ${iptables_wait} -t nat -I BOX_LOCAL -o ${ignore} -j RETURN
  done

  if [ "${mode}" = "blacklist" ] ; then
    if [ "$(cat ${filter_packages_file[*]})" = "" ] ; then
      # 路由所有流量
      ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${Clash_redir_port}
      log "[info] 黑白名单无条目 全部应用启用透明代理"
    else
      # 绕过应用
      for appid in $(cat ${appuid_file[*]}) ; do
        ${iptables_wait} -t nat -I BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      # 允许 !app
      ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${Clash_redir_port}
      logs "[info] 代理模式: ${mode} "
      for package in $(cat ${filter_packages_file[*]}) ; do
        echo -n "${package} " >> ${CFM_logs_file}
      done
      echo "没有透明代理." >> ${CFM_logs_file}
      # log "[info] 代理模式: ${mode} $(cat ${filter_packages_file[*]}) 没有透明代理."
    fi
  elif [ "${mode}" = "whitelist" ] ; then
    # 路由应用到 BOX
    for appid in $(cat ${appuid_file[*]}) ; do
      ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j REDIRECT --to-ports ${Clash_redir_port}
    done
    ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j REDIRECT --to-ports ${Clash_redir_port}
    ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j REDIRECT --to-ports ${Clash_redir_port}
    logs "[info] 代理模式: ${mode} "
    for package in $(cat ${filter_packages_file[*]}) ; do
      echo -n "${package} " >> ${CFM_logs_file}
    done
    echo "透明代理." >> ${CFM_logs_file}
    # log "代理模式: ${mode} $(cat ${filter_packages_file[*]}) 透明代理."
  fi

  ${iptables_wait} -t nat -I OUTPUT -j BOX_LOCAL
  ${iptables_wait} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_redir_port} -j REJECT
}

stop_redirect() {
  ${iptables_wait} -t nat -D PREROUTING -j BOX_EXTERNAL

  ${iptables_wait} -t nat -D OUTPUT -j BOX_LOCAL
  ${iptables_wait} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_redir_port} -j REJECT

  ${iptables_wait} -t nat -F BOX_EXTERNAL
  ${iptables_wait} -t nat -X BOX_EXTERNAL
  ${iptables_wait} -t nat -F BOX_LOCAL
  ${iptables_wait} -t nat -X BOX_LOCAL
}

start_tproxy() {
  ip rule add fwmark ${mark_id} lookup ${mark_id}
  ip route add local default dev lo table ${mark_id}
  if [ "${ipv6}" = "true" ] ; then
    ip -6 rule add fwmark ${mark_id} lookup ${mark_id}
    ip -6 route add local default dev lo table ${mark_id}
  fi

  ${iptables_wait} -t mangle -N BOX_EXTERNAL
  ${iptables_wait} -t mangle -F BOX_EXTERNAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -N BOX_EXTERNAL
    ${ip6tables_wait} -t mangle -F BOX_EXTERNAL
  fi

  # 跳过盒子本身
  # ${iptables_wait} -t mangle -A BOX_EXTERNAL -j RETURN -m mark --mark ${routing_mark}

  # 跳过其他接口
  # 注意：一些接口可能以 r_ / oem / nm_ / qcom_ 命名
  # 可能需要更复杂的解决方案。
  ${iptables_wait} -t mangle -I BOX_EXTERNAL -i rmnet_data+ -j RETURN
  ${iptables_wait} -t mangle -I BOX_EXTERNAL -i ccmni+ -j RETURN
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -I BOX_EXTERNAL -i rmnet_data+ -j RETURN
    ${ip6tables_wait} -t mangle -I BOX_EXTERNAL -i ccmni+ -j RETURN
  fi

  # 绕过保留IP
  if [ "${Clash_bin_name}" = "clash" ] ; then
    for subnet in ${reserved_ip[*]} ; do
      ${iptables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet} -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      for subnet6 in ${reserved_ip6[*]} ; do
        ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet6} -j RETURN
      done
    fi
  else
    for subnet in ${reserved_ip[*]} ; do
      ${iptables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet} ! -p udp -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      for subnet6 in ${reserved_ip6[*]} ; do
        ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -d ${subnet6} ! -p udp -j RETURN
      done
    fi
  fi

  ${iptables_wait} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  ${iptables_wait} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  fi

  # 允许 ap 接口
  # 注意：旧的安卓设备可能只有一个 wlan 接口。
  # 一些新的安卓设备有多个 wlan 接口，例如 wlan0（用于互联网），wlan1（用于AP）。
  for ap in ${ap_list[*]} ; do
    ${iptables_wait} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${iptables_wait} -t mangle -A BOX_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  done
  log "[info] 网卡${ap_list[*]} 已启用透明代理。"
  if [ "${ipv6}" = "true" ] ; then
    for ap6 in ${ap_list[*]} ; do
      ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap6} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A BOX_EXTERNAL -p udp -i ${ap6} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    done
  fi

  ${iptables_wait} -t mangle -I PREROUTING -j BOX_EXTERNAL

  ${iptables_wait} -t mangle -N BOX_LOCAL
  ${iptables_wait} -t mangle -F BOX_LOCAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -I PREROUTING -j BOX_EXTERNAL

    ${ip6tables_wait} -t mangle -N BOX_LOCAL
    ${ip6tables_wait} -t mangle -F BOX_LOCAL
  fi
  # 绕过忽略的网卡
  for ignore in ${ignore_out_list[*]} ; do
    ${iptables_wait} -t mangle -I BOX_LOCAL -o ${ignore} -j RETURN
  done
  if [ "${ipv6}" = "true" ] ; then
    for ignore6 in ${ignore_out_list[*]} ; do
      ${ip6tables_wait} -t mangle -I BOX_LOCAL -o ${ignore6} -j RETURN
    done
  fi

  # 绕过保留IP
  if [ "${Clash_bin_name}" = "clash" ] ; then
    ${iptables_wait} -t mangle -A BOX_LOCAL -p udp --dport 53 -j RETURN
    for subnet in ${reserved_ip[*]} ; do
      ${iptables_wait} -t mangle -A BOX_LOCAL -d ${subnet} -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp --dport 53 -j RETURN
      for subnet6 in ${reserved_ip6[*]} ; do
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -d ${subnet6} -j RETURN
      done
    fi
  else
    ${iptables_wait} -t mangle -A BOX_LOCAL -p udp --dport 53 -j RETURN
    for subnet in ${reserved_ip[*]} ; do
      ${iptables_wait} -t mangle -A BOX_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables_wait} -t mangle -A BOX_LOCAL -d ${subnet} ! -p udp -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp --dport 53 -j RETURN
      for subnet6 in ${reserved_ip6[*]} ; do
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -d ${subnet6} ! -p udp -j RETURN
      done
    fi
  fi

  # 防止回环
  ${iptables_wait} -t mangle -I BOX_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -I BOX_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  fi
  # ${iptables_wait} -t mangle -I BOX_LOCAL -j RETURN -m mark --mark ${routing_mark}
  # 屏蔽内核联网（？）
  # ${iptables_wait} -t mangle -A BOX_LOCAL -m owner ! --uid 0-99999999 -j DROP

  if [ "${mode}" = "blacklist" ] ; then
    if [ "$(cat ${filter_packages_file[*]})" = "" ] ; then
      # 路由所有流量
      ${iptables_wait} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${mark_id}
      ${iptables_wait} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${mark_id}
      if [ "${ipv6}" = "true" ] ; then
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${mark_id}
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${mark_id}
      fi
      log "[info] 黑白名单无条目 全部应用启用透明代理"
    else
      # 绕过应用
      for appid in $(cat ${appuid_file[*]}) ; do
        ${iptables_wait} -t mangle -I BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      if [ "${ipv6}" = "true" ] ; then
        for appid6 in $(cat ${appuid_file[*]}) ; do
          ${ip6tables_wait} -t mangle -I BOX_LOCAL -m owner --uid-owner ${appid6} -j RETURN
        done
      fi
      # 允许非应用流量
      ${iptables_wait} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${mark_id}
      ${iptables_wait} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${mark_id}
      if [ "${ipv6}" = "true" ] ; then
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${mark_id}
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${mark_id}
      fi
      logs "[info] 代理模式: ${mode} "
      for package in $(cat ${filter_packages_file[*]}) ; do
        echo -n "${package} " >> ${CFM_logs_file}
      done
      echo "没有透明代理。" >> ${CFM_logs_file}
      # log "[info] 代理模式: ${mode} $(cat ${filter_packages_file[*]}) 没有透明代理。"
    fi
  elif [ "${mode}" = "whitelist" ] ; then
    # 路由应用到 Box
    for appid in $(cat ${appuid_file[*]}) ; do
      ${iptables_wait} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
      ${iptables_wait} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
    done
    if [ "${ipv6}" = "true" ] ; then
      for appid6 in $(cat ${appuid_file[*]}) ; do
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid6} -j MARK --set-mark ${mark_id}
        ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid6} -j MARK --set-mark ${mark_id}
      done
    fi
    ${iptables_wait} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
    # 路由 dnsmasq 到 Box
    ${iptables_wait} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
    # 路由 DNS 请求到 Box
    ${iptables_wait} -t mangle -A BOX_LOCAL -p udp --dport 53 -j MARK --set-mark ${mark_id}
    if [ "${ipv6}" = "true" ] ; then
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
      # 路由 DNS 请求到 Box
      ${ip6tables_wait} -t mangle -A BOX_LOCAL -p udp --dport 53 -j MARK --set-mark ${mark_id}
    fi
    logs "[info] 代理模式: ${mode} "
    for package in $(cat ${filter_packages_file[*]}) ; do
      echo -n "${package} " >> ${CFM_logs_file}
    done
    echo "透明代理。" >> ${CFM_logs_file}
  fi

  ${iptables_wait} -t mangle -I OUTPUT -j BOX_LOCAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -I OUTPUT -j BOX_LOCAL
  fi

  ${iptables_wait} -t mangle -N DIVERT
  ${iptables_wait} -t mangle -F DIVERT
  ${iptables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
  ${iptables_wait} -t mangle -A DIVERT -j ACCEPT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -N DIVERT
    ${ip6tables_wait} -t mangle -F DIVERT
    ${ip6tables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A DIVERT -j ACCEPT
  fi

  ${iptables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  # 此规则用于阻止本地访问 tproxy-port 以防止流量循环。
  ${iptables_wait} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
    # 此规则用于阻止本地访问 tproxy-port 以防止流量循环。
    ${ip6tables_wait} -A OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT
  fi

  if [ "${Clash_bin_name}" = "clash" ] ; then
    ${iptables_wait} -t nat -N CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -F CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -A CLASH_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}

    ${iptables_wait} -t nat -I PREROUTING -j CLASH_DNS_EXTERNAL

    ${iptables_wait} -t nat -N CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -F CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}

    ${iptables_wait} -t nat -I OUTPUT -j CLASH_DNS_LOCAL
    # 修复 ICMP（ping），这并不保证 ping 结果有效（诸如 clash 等代理不支持 ICMP 转发），
    # 只是返回一个结果，"--to-destination" 可以设置为一个可达地址。
    ${iptables_wait} -t nat -I OUTPUT -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables_wait} -t nat -I PREROUTING -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi
}

stop_tproxy() {
  ip rule del fwmark ${mark_id} table ${mark_id}
  ip route del local default dev lo table ${mark_id}
  if [ "${ipv6}" = "true" ] ; then
    ip -6 rule del fwmark ${mark_id} table ${mark_id}
    ip -6 route del local default dev lo table ${mark_id}
  fi

  ${iptables_wait} -t mangle -D PREROUTING -j BOX_EXTERNAL
    
  ${iptables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

  ${iptables_wait} -t mangle -D OUTPUT -j BOX_LOCAL

  ${iptables_wait} -t mangle -F BOX_EXTERNAL
  ${iptables_wait} -t mangle -X BOX_EXTERNAL

  ${iptables_wait} -t mangle -F BOX_LOCAL
  ${iptables_wait} -t mangle -X BOX_LOCAL

  ${iptables_wait} -t mangle -F DIVERT
  ${iptables_wait} -t mangle -X DIVERT

  ${iptables_wait} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables_wait} -t mangle -D PREROUTING -j BOX_EXTERNAL
    
    ${ip6tables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

    ${ip6tables_wait} -t mangle -D OUTPUT -j BOX_LOCAL

    ${ip6tables_wait} -t mangle -F BOX_EXTERNAL
    ${ip6tables_wait} -t mangle -X BOX_EXTERNAL

    ${ip6tables_wait} -t mangle -F BOX_LOCAL
    ${ip6tables_wait} -t mangle -X BOX_LOCAL

    ${ip6tables_wait} -t mangle -F DIVERT
    ${ip6tables_wait} -t mangle -X DIVERT

    ${ip6tables_wait} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT
  fi

  ${iptables_wait} -t nat -D PREROUTING -j CLASH_DNS_EXTERNAL

  ${iptables_wait} -t nat -D OUTPUT -j CLASH_DNS_LOCAL

  ${iptables_wait} -t nat -F CLASH_DNS_EXTERNAL
  ${iptables_wait} -t nat -X CLASH_DNS_EXTERNAL

  ${iptables_wait} -t nat -F CLASH_DNS_LOCAL
  ${iptables_wait} -t nat -X CLASH_DNS_LOCAL

  ${iptables_wait} -t nat -D OUTPUT -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  ${iptables_wait} -t nat -D PREROUTING -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
}


detected_port() {
  sleep 1
  if [ "${port_detect}" = "true" ]; then
    if ! (${scripts_dir}/clash.tool -p); then
      return 0
    fi
  else
    log "[info] 已关闭端口检测"
  fi
}

if [ "${mode}" != "core" ] ; then
  while getopts ":sk" signal ; do
    case ${signal} in
      s)
        ${scripts_dir}/clash.tool -f
        ${scripts_dir}/clash.tool -v
        stop_tproxy >> /dev/null 2>&1
        stop_redirect >> /dev/null 2>&1
        forward -D >> /dev/null 2>&1
        sleep 0.75
        detected_port
        if [ "${network_mode}" = "UDP" ] ; then
          log "[info] 已启用TPROXY模式 代理TCP+UDP"
          log "[info] 正在创建 iptables 转发规则"
          time start_tproxy && log "[info] 创建 iptables 转发规则完成" || log "[error] 创建 iptables转发规则失败，本模块可能与您的手机不兼容"
        else
          [ "${network_mode}" = "TCP" ] && log "[info] 启动REDIRECT代理TCP，请确保您的redir-port填写正确，否则将无法联网" || log "[info] 使用混合模式：TCP+TUN 切换模式后如果手机无法联网，请重启"
          log "[info] 正在创建 iptables 转发规则"
          time start_redirect && log "[info] 创建 iptables 转发规则完成" || log "[error] 创建 iptables 转发规则失败"
          time forward -I
        fi
        log "[info] Clash 已连接"
        ;;
      k)
        log "[warning] 清除iptables转发规则"
        time stop_tproxy
        time stop_redirect
        time forward -D
        log "[warning] 清除完成"
        ;;
      ?)
        echo ""
        ;;
    esac
  done
else
  while getopts ":sk" signal ; do
    case ${signal} in
      s)
        stop_tproxy >> /dev/null 2>&1
        stop_redirect >> /dev/null 2>&1
        forward -D >> /dev/null 2>&1
        time forward -I
        log "[info] 模式：${mode}，禁用透明代理。"
        log "[info] Clash 已连接"
        ;;
      k)
        stop_tproxy >> /dev/null 2>&1
        stop_redirect >> /dev/null 2>&1
        time forward -D
        log "[warning] 清除代理规则"
        ;;
      *)
        echo "$0:  资源占用：$0 {enable|disable}"
        ;;
    esac
  done
fi
