#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
source /data/clash/clash.config

dow_config() {
  if [ "${config_online}" = "true" ] ; then
    if ! [ "$(head -1 ${Clash_run_path}/root)" = "disable" ] ; then
      if ! (${scripts_dir}/clash.tool -o) ; then
        log "[error] failed to download config"
        log "[error] make sure you are connected to the internet" && exit 1
      fi
    fi
  fi
}

replace_kernel() {
  chmod 0755 ${Clash_lib}/* && rm -rf ${Clash_bin}/clash
  err="failed to replace kernel."
  if [ "${use_premium}" = "true" ] ; then
    cp -f ${Clash_Premium} ${Clash_bin}/clash && echo "" || log "[error] ${err}"
  else
    cp -f ${Clash_Meta} ${Clash_bin}/clash && echo "" || log "[error] ${err}"
  fi
}

use_clash() {
  [ "${use_premium}" = "true" ] \
  && log "[info] ☑ Clash Premium is enable." || log "[info] ☑ Clash Meta is enable."
    if [ ! -f "${Clash_bin_path}" ] ; then
      log "[error] kernel not detected ${Clash_bin_path}"
      exit 1
    fi
  log "[info] konfigurasi ${Clash_config_file}."
}

ceks_clash() {
  local PID=$(pidof clash 2> /dev/null)
  if (cat /proc/${PID}/cmdline | grep -q ${Clash_bin_name}) ; then
    log "[warning] Clash service still started" && exit 1
  fi
}

tun_alive() {
  mkdir -p /dev/net
  [ ! -L /dev/net/tun ] && ln -sf /dev/tun /dev/net/tun
}

tun_tproxy() {
  if [ "${Clash_tun_status}" = "true" ] ; then
    if [ ${arm} = "aarch64" ] ; then
      tun_alive
      log "[info] turn on tun mode, stack: [${Clash_stack_mode}] "
      log "[info] create /dev/net/tun."
      sed -i 's/auto-detect-interface:.*/auto-detect-interface: true/' ${Clash_template}
      sed -i 's/auto-route:.*/auto-route: true/' ${Clash_template}
      sed -i 's/tproxy-port:.*/tproxy-port: 0/' ${Clash_template}
      sed -i 's/network_mode=.*/network_mode="MIXED"/' /data/clash/clash.config
    else
      log "[error] tun only for arm64/armv8" && exit 1
    fi
  else
    sed -i 's/auto-detect-interface:.*/auto-detect-interface: false/' ${Clash_template}
    sed -i 's/auto-route:.*/auto-route: false/' ${Clash_template}
    sed -i 's/tproxy-port:.*/tproxy-port: 9898/' ${Clash_template}
    sed -i 's/network_mode=.*/network_mode="UDP"/' /data/clash/clash.config
    log "[info] turn on tproxy mode."
  fi
}

temporary_config_file() {
  if [ -f "${Clash_template}" ] ; then
    if [ -f "${Clash_config_file}" ] ; then
      cp -f ${Clash_template} ${temporary_config_file}.temp && echo "\n" >> ${temporary_config_file}.temp
      sed -n -E '/^proxies:$/,$p' ${Clash_config_file} >> ${temporary_config_file}.temp
      sed -i '/^[  ]*$/d' ${temporary_config_file}.temp
    else
      log "[error] ${Clash_config_file} file is missing!!!" && exit 1
    fi
  else
    log "[error] ${Clash_template} file is missing !!!" && exit 1
  fi

  mv ${temporary_config_file}.temp ${temporary_config_file} \
  && log "[info] merge files ${Clash_config_file} & template Succes" || log "[error] merge files ${Clash_config_file} & template failed !!!"

  if [ ! -f "${temporary_config_file}" ] ; then
     log "[error] ${temporary_config_file} file is missing !!!" && exit 1
  fi
}

crontab_sec() {
  if [ ! "${schedule_update_core}" = "false" ] ; then
    echo "${schedule_update_core} ${scripts_dir}/clash.tool -k" >> ${Clash_run_path}/root
    log "[info] Crontab Update kernel (${schedule_update_core})"
    log "[info] Update kernel is ☑ enable."
  fi
  if [ ! "${update_interval}" = "false" ] ; then
    echo "${update_interval} ${scripts_dir}/clash.tool -s" >> ${Clash_run_path}/root
    log "[info] Crontab (geo) and (subscription) (${update_interval})."
    log "[info] clash geox ☐ (${auto_updateGeoX})."
    log "[info] clash subscription ☐ (${auto_updateSubcript})."
  else
    log "[info] Crontab geox & subscription is ☒ disable"
  fi
}

log_suc() {
  sed -i s/.*msg=// ${Clash_run_path}/error.log
  sed -i 's/configuration file*//' ${Clash_run_path}/error.log
  while read p ; do
    log "[info]" "$p"
  done <${Clash_run_path}/error.log
}

log_failed() {
  log "[error] ${Clash_config_file} failed"
  sed -i s/.*msg=// ${Clash_run_path}/error.log
  sed -i 's/fatal msg=*//' ${Clash_run_path}/error.log
  sed -i 's/configuration file*//' ${Clash_run_path}/error.log
  while read p ; do
    log "[error]" "$p"
  done <${Clash_run_path}/error.log
}

run_clash() {
  ${Clash_bin_path} -t -d ${Clash_data_dir} -f ${temporary_config_file} > ${Clash_run_path}/error.log
  if [ "$?" = "0" ] ; then
    ulimit -SHn 1000000
    nohup ${busybox_path} setuidgid 0:3005 ${Clash_bin_path} -d ${Clash_data_dir} -f ${temporary_config_file} > ${Clash_run_path}/output-clash.log 2>&1 &
    echo -n $! > ${Clash_pid_file}
    log_suc
  else
    log_failed
    [ "${use_config}" = "false" ] \
    && (mv ${temporary_config_file} ${Clash_data_dir}/config.yaml) || (mv ${temporary_config_file} ${Clash_data_dir}/${use_config})
    log "[error] please check ${Clash_config_file} configuration" && exit 1
  fi
  rm -rf ${Clash_run_path}/error.log
}

cgroup_limit() {
  if [ "${Cgroup_memory}" = "true" ] ; then
    [ "${scripts_dir}/clash.tool -l" ] \
    && log "[warning] kernel does not support cgroup" || log "[info] cgroup limit: ${Cgroup_memory_limit}"
  fi
}

start_clash() {
  dow_config
  replace_kernel
  echo $(date) > ${CFM_logs_file}
  echo "$(${Clash_bin_path} -v)" >> ${CFM_logs_file}
  echo "Clash for Magisk v3.0" > /dev/null
  echo "CPU: % | RES: kb" >> ${CFM_logs_file}
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
  if [ "${ipv6}" = "false" ] ; then
    echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
    echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
    echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
    echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    log "[info] Ipv6: ☒ disable"
  else
    echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
    echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
    echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
    echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
    echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    log "[info] Ipv6: ☑ enable"
  fi
  use_clash
  ceks_clash
  tun_tproxy
  temporary_config_file
  if [ -f "${Clash_bin_path}" ] ; then
    chown 0:3005 ${Clash_bin_path} && chown 0:3005 ${temporary_config_file}
    chmod 0700 ${Clash_bin_path} && chmod 0700 ${temporary_config_file}
    nohup ${busybox_path} crond -c ${Clash_run_path} > /dev/null 2>&1 &
    ${busybox_path} crontab -c ${Clash_run_path} -r
    touch ${Clash_run_path}/root
    chmod 0600 ${Clash_run_path}/root
    crontab_sec
  else
    log "[error] Clash kernel ${Clash_bin_path} file is missing !!!." && exit 1
  fi

  if [ -f ${temporary_config_file} ] ; then
    if (${Clash_bin_path} -v > /dev/null 2>&1) ; then
      run_clash
      cgroup_limit
      [ "$run_usage" = "true" ] \
      && (nohup ${scripts_dir}/usage.sh > /dev/null 2>&1 &) || log "[info] display Usage RES:/CPU: is disabled"
    else
      log "[error] kernel Clash error/broken/not supported" && exit 1
    fi
  else
    log "[error] ${Clash_config_file} file is missing" && exit 1
  fi
}

kill_tool() {
  cronkill=$(ps -ef | grep root | grep "crond -c /data/clash/" | ${busybox_path} awk '{ print $2 }' | sort -u)
  for cron in ${cronkill[*]} ; do
     kill -9 ${cron}
  done
  if (kill -9 $(cat ${Clash_run_path}/dnstt.pid)) ; then
    rm -rf ${Clash_run_path}/dnstt.pid
    log "[warning] ${dnstt_bin_name} terminated."
  fi
}

stop_clash() {
  kill_tool
  if (kill -9 $(pidof clash) || killall -9 clash) ; then
    rm -rf ${Clash_pid_file}
    sleep 0.75
    [ $(pidof clash) ] \
    && log "[warning] Clash service is still running" || log "[warning] Clash shutting down."
    [ ! $(pidof clash) ] && log "[warning] Clash terputus."
  else
    log "[error] failed stop Clash"
  fi
}

while getopts ":sk" signal ; do
  case ${signal} in
    s)
      stop_clash >> /dev/null 2>&1
      time start_clash
      ;;
    k)
      time stop_clash
      ;;
    ?)
      echo ""
      ;;
  esac
done
