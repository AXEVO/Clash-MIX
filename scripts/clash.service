#!/system/bin/sh

# 获取脚本的绝对路径和目录
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
# 导入Clash的配置文件
source /data/clash/clash.config

# 下载配置文件的函数
dow_config() {
  if [ "${config_online}" = "true" ] ; then
    # 检查是否禁用了Clash
    if ! [ "$(head -1 ${Clash_run_path}/root)" = "disable" ] ; then
      # 使用clash.tool工具下载配置文件
      if ! (${scripts_dir}/clash.tool -o) ; then
        log "[error] 下载配置文件失败"
        log "[error] 确保网络连接正常" && exit 1
      fi
    fi
  fi
}

# 替换内核的函数
replace_kernel() {
  # 修改文件权限并删除旧的clash二进制文件
  chmod 0755 ${Clash_lib}/* && rm -rf ${Clash_bin}/clash
  err="更换内核失败。"
  if [ "${use_premium}" = "true" ] ; then
    # 如果使用Clash Premium，则复制Premium版本的二进制文件
    cp -f ${Clash_Premium} ${Clash_bin}/clash && echo "" || log "[error] ${err}"
  else
    # 如果使用Clash Meta，则复制Meta版本的二进制文件
    cp -f ${Clash_Meta} ${Clash_bin}/clash && echo "" || log "[error] ${err}"
  fi
}

# 使用Clash的函数
use_clash() {
  # 根据配置使用Clash Premium或Clash Meta，并输出相应信息
  [ "${use_premium}" = "true" ] \
  && log "[info] ☑ 启用 Clash Premium内核" \
  && log "[warning] 使用Premium内核前请先手动删除" \
  && log "[warning] template文件中未适配P核的配置项目" \
  && log "[warning] 否则P内核将无法正常启动" \
  || log "[info] ☑ 启用 Clash Meta内核"
  if [ ! -f "${Clash_bin_path}" ] ; then
    log "[error] 找不到内核 ${Clash_bin_path}"
    exit 1
  fi
  log "[info] 使用配置文件 ${Clash_config_file}."
}


# 检查Clash服务是否仍在运行的函数
ceks_clash() {
  local PID=$(pidof clash 2> /dev/null)
  if (cat /proc/${PID}/cmdline | grep -q ${Clash_bin_name}) ; then
    log "[warning] Clash 服务正在运行" && exit 1
  fi
}

# 检测tun设备是否存活的函数
tun_alive() {
  mkdir -p /dev/net
  [ ! -L /dev/net/tun ] && ln -sf /dev/tun /dev/net/tun
}

# 配置tun设备用于tproxy的函数
tun_tproxy() {
  if [ "${Clash_tun_status}" = "true" ] ; then
    if [ ${arm} = "aarch64" ] ; then
      tun_alive
      log "[info] 启用 TUN 模式代理方式: [${Clash_stack_mode}] "
      log "[info] 创建 /dev/net/tun."
      sed -i 's/auto-detect-interface:.*/auto-detect-interface: true/' ${Clash_template}
      sed -i 's/auto-route:.*/auto-route: true/' ${Clash_template}
      sed -i 's/tproxy-port:.*/tproxy-port: 0/' ${Clash_template}
      sed -i 's/network_mode=.*/network_mode="MIXED"/' /data/clash/clash.config
    else
      log "[error] TUN模式只支持arm64/armv8" && exit 1
    fi
  else
    sed -i 's/auto-detect-interface:.*/auto-detect-interface: false/' ${Clash_template}
    sed -i 's/auto-route:.*/auto-route: false/' ${Clash_template}
    sed -i 's/tproxy-port:.*/tproxy-port: 9898/' ${Clash_template}
    sed -i 's/network_mode=.*/network_mode="UDP"/' /data/clash/clash.config
    log "[info] 启用 TProxy 模式"
  fi
}

# 生成临时配置文件的函数
temporary_config_file() {
  if [ -f "${Clash_template}" ] ; then
    if [ -f "${Clash_config_file}" ] ; then
      cp -f ${Clash_template} ${temporary_config_file}.temp && echo "\n" >> ${temporary_config_file}.temp
      sed -n -E '/^proxies:$/,$p' ${Clash_config_file} >> ${temporary_config_file}.temp
      sed -i '/^[  ]*$/d' ${temporary_config_file}.temp
    else
      log "[error] ${Clash_config_file} 文件不存在" && exit 1
    fi
  else
    log "[error] ${Clash_template} 文件不存在" && exit 1
  fi

  mv ${temporary_config_file}.temp ${temporary_config_file} \
  && log "[info] 合并 ${Clash_config_file} +模板成功" || log "[error] 合并 ${Clash_config_file} +模板失败"

  if [ ! -f "${temporary_config_file}" ] ; then
     log "[error] 找不到 ${temporary_config_file} 无法启动" && exit 1
  fi
}

# 设置定时任务的秒数
crontab_sec() {
  if [ ! "${schedule_update_core}" = "false" ] ; then
    echo "${schedule_update_core} ${scripts_dir}/clash.tool -k > /data/clash/run/update.log 2>&1" >> ${Clash_run_path}/root
    log "[info] 定时更新内核 [${schedule_update_core}]"
    log "[info] 更新内核已启用 ☑。"
  fi
  if [ ! "${update_interval}" = "false" ] ; then
    echo "${update_interval} ${scripts_dir}/clash.tool -s > /data/clash/run/update.log 2>&1" >> ${Clash_run_path}/root
    log "[info] 定时更新Geo数据和订阅时间 [${update_interval}]"
    log "[info] 自动更新Geo数据 ： [${auto_updateGeoX}]"
    log "[info] 自动更新订阅 ：[${auto_updateSubcript}]"
  else
    log "[info] 定时更新Geo数据库和订阅已禁用 ☒"
  fi
}

# 提取成功日志的函数
log_suc() {
  echo "━━━━━━━━━━内核日志━━━━━━━━━━━" >> ${CFM_logs_file}
  sed -i s/.*msg=// ${Clash_run_path}/start.log
  sed -i 's/configuration file*//' ${Clash_run_path}/start.log
  sed 's/.*Z] //g' -i ${Clash_run_path}/start.log
  while read p ; do
    log "[info]" "$p"
  done <${Clash_run_path}/start.log
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
}

# 提取失败日志的函数
log_failed() {
  log "[error] 启动失败；请检查内核报错并修改配置"
  log "[error] 当前配置：${Clash_config_file}"
  echo "━━━━━━━━━━内核日志━━━━━━━━━━━" >> ${CFM_logs_file}
  sed -i s/.*msg=// ${Clash_run_path}/start.log
  sed -i 's/fatal msg=*//' ${Clash_run_path}/start.log
  sed -i 's/configuration file*//' ${Clash_run_path}/start.log
  sed 's/.*Z] //g' -i ${Clash_run_path}/start.log
  while read p ; do
    log "[error]" "$p"
  done <${Clash_run_path}/start.log
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
}

# 启动Clash的函数
run_clash() {
  ${Clash_bin_path} -t -d ${Clash_data_dir} -f ${temporary_config_file} > ${Clash_run_path}/start.log
  if [ "$?" = "0" ] ; then
    ulimit -SHn 1000000
    nohup ${busybox_path} setuidgid 0:3005 ${Clash_bin_path} -d ${Clash_data_dir} -f ${temporary_config_file} > ${Clash_run_path}/output-clash.log 2>&1 &
    echo -n $! > ${Clash_pid_file}
    log_suc
  else
    log_failed
    [ "${use_config}" = "false" ] \
    && (mv ${temporary_config_file} ${Clash_data_dir}/config.yaml) || (mv ${temporary_config_file} ${Clash_data_dir}/${use_config})
    exit 1
  fi
}

# 设置cgroup限制的函数
cgroup_limit() {
  if [ "${Cgroup_memory}" = "true" ] ; then
    [ "${scripts_dir}/clash.tool -l" ] \
    && log "[warning] 内核不支持cgroup" || log "[info] cgroup限制: ${Cgroup_memory_limit}"
  fi
}

# 启动Clash的函数
start_clash() {
  dow_config
  replace_kernel
  echo $(date) > ${CFM_logs_file}
  echo "$(${Clash_bin_path} -v)" >> ${CFM_logs_file}
  echo "Clash for Magisk v3.0" > /dev/null
  echo "CPU: % | RES: kb" >> ${CFM_logs_file}
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━" >> ${CFM_logs_file}
  if [ "${ipv6}" = "false" ] ; then
    echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
    echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
    echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
    echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
    echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    log "[info] IPv6: ☒ 禁用"
  else
    echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
    echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
    echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
    echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
    echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    log "[info] IPv6: ☑ 启用"
  fi
  use_clash
  ceks_clash
  tun_tproxy
  temporary_config_file
  if [ -f "${Clash_bin_path}" ] ; then
    chown 0:3005 ${Clash_bin_path} && chown 0:3005 ${temporary_config_file}
    chmod 0700 ${Clash_bin_path} && chmod 0700 ${temporary_config_file}
    rm -rf ${Clash_run_path}/crond.log
    nohup ${busybox_path} crond -L ${Clash_run_path}/crond.log -c ${Clash_run_path} > /dev/null 2>&1 &
    ${busybox_path} crontab -c ${Clash_run_path} -r
    touch ${Clash_run_path}/root
    chmod 0600 ${Clash_run_path}/root
    crontab_sec
  else
    log "[error] Clash内核文件 ${Clash_bin_path} 丢失" && exit 1
  fi

  if [ -f ${temporary_config_file} ] ; then
    if (${Clash_bin_path} -v > /dev/null 2>&1) ; then
      run_clash
      cgroup_limit
      [ "$run_usage" = "true" ] \
      && (nohup ${scripts_dir}/usage.sh > /dev/null 2>&1 &) || log "[info] 显示使用情况 RES:/CPU: 已禁用"
    else
      log "[error] Clash内核错误/损坏/不受支持" && exit 1
    fi
  else
    log "[error] ${Clash_config_file} 文件丢失" && exit 1
  fi
}

# 终止Clash的函数
kill_tool() {
  cronkill=$(ps -ef | grep root | grep "crond -L /data/clash/run/crond.log" | ${busybox_path} awk '{ print $2 }' | sort -u)
  for cron in ${cronkill[*]} ; do
     kill -9 ${cron}
  done
  if (kill -9 $(cat ${Clash_run_path}/dnstt.pid)) ; then
    rm -rf ${Clash_run_path}/dnstt.pid
    log "[warning] ${dnstt_bin_name} 已关闭"
  fi
}

# 停止Clash的函数

stop_clash() {
  kill_tool
  if (kill -9 $(pidof clash) || killall -9 clash) ; then
    rm -rf ${Clash_pid_file}
    sleep 0.75
    if [ $(pidof clash) ]; then
      log "[error] Clash内核关闭失败"
    else
      log "[warning] Clash内核已关闭"
      log "[warning] 模块已停止运行"
    fi
  else
    if [ $(pidof clash) ]; then
      log "[error] Clash内核关闭失败"
    else
      log "[warning] 模块未运行"
    fi
  fi
}

# 解析命令行参数
while getopts ":sk" signal ; do
  case ${signal} in
    s)
      stop_clash >> /dev/null 2>&1
      time start_clash
      ;;
    k)
      time stop_clash
      ;;
    ?)
      echo ""
      ;;
  esac
done
